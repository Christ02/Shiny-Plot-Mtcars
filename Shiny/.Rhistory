R2 <- 1 - (SR/ST)
R2 <- 1 - (SR/ST)
rm(list = ls())
shiny::runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/ejemplo')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Shiny/shiny_inputs')
library(shiny)
library(ggplot2)
library(DT)
ui <- fluidPage(
titlePanel("Interacción con ggplot y mtcars"),
# Gráfico interactivo
plotOutput("plot",
hover = hoverOpts("plot_hover"),
click = clickOpts("plot_click"),
dblclick = dblclickOpts("plot_dblclick"),
brush = brushOpts("plot_brush", resetOnNew = TRUE)),
# Tabla interactiva
DTOutput("mtcars_table")
)
server <- function(input, output, session) {
# Estado inicial: todos los puntos sin color
vals <- reactiveValues(df = mtcars, color = rep("black", nrow(mtcars)))
# Gráfico ggplot
output$plot <- renderPlot({
ggplot(vals$df, aes(x = wt, y = mpg)) +
geom_point(aes(color = vals$color), size = 4) +
theme_minimal() +
scale_color_identity()
})
# Hover: Cambiar color a gris temporalmente
observeEvent(input$plot_hover, {
hover_index <- nearPoints(vals$df, input$plot_hover, allRows = TRUE)$selected_
vals$color[hover_index] <- "grey"
isolate(vals$color[!hover_index] <- "black")
})
# Click: Cambiar color a verde
observeEvent(input$plot_click, {
click_index <- nearPoints(vals$df, input$plot_click, allRows = TRUE)$selected_
vals$color[click_index] <- "green"
})
# Doble click: Quitar color (volver al estado inicial)
observeEvent(input$plot_dblclick, {
vals$color <- rep("black", nrow(vals$df))
})
# Brush: Cambiar color de los puntos seleccionados en el área de selección
observeEvent(input$plot_brush, {
brush_index <- brushedPoints(vals$df, input$plot_brush, allRows = TRUE)$selected_
vals$color[brush_index] <- "blue"
isolate(vals$color[!brush_index] <- "black")
})
# Mostrar tabla con librería DT
output$mtcars_table <- renderDT({
datatable(mtcars)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(DT)
# Definimos la interfaz de usuario (UI)
ui <- fluidPage(
titlePanel("Interacciones avanzadas con ggplot y mtcars"),
# Dividimos la página en dos columnas: Gráfico y tabla
fluidRow(
column(8,
plotOutput("plot",
hover = hoverOpts("plot_hover", delay = 100, delayType = "debounce"),
click = clickOpts("plot_click"),
dblclick = dblclickOpts("plot_dblclick"),
brush = brushOpts("plot_brush", resetOnNew = TRUE)
)
),
column(4,
DTOutput("mtcars_table")
)
)
)
# Definimos el servidor
server <- function(input, output, session) {
# Almacenamos los colores iniciales (negro) en un reactiveValues
vals <- reactiveValues(df = mtcars, color = rep("black", nrow(mtcars)))
# Renderizamos el gráfico con ggplot
output$plot <- renderPlot({
ggplot(vals$df, aes(x = wt, y = mpg)) +
geom_point(aes(color = vals$color), size = 5, alpha = 0.8) +
theme_minimal() +
labs(x = "Peso (1000 lbs)", y = "Millas por galón (mpg)",
title = "Interacción con los puntos de mtcars") +
scale_color_identity()
})
# Hover: Cambia temporalmente el color a gris
observeEvent(input$plot_hover, {
hover_index <- nearPoints(vals$df, input$plot_hover, allRows = TRUE)$selected_
vals$color[hover_index] <- "grey"
isolate(vals$color[!hover_index] <- "black")  # Restaura los colores no seleccionados
})
# Click: Cambia el color a verde
observeEvent(input$plot_click, {
click_index <- nearPoints(vals$df, input$plot_click, allRows = TRUE)$selected_
vals$color[click_index] <- "green"
})
# Doble click: Restablece todos los colores a negro
observeEvent(input$plot_dblclick, {
vals$color <- rep("black", nrow(vals$df))
})
# Brush: Cambia el color de los puntos seleccionados por el brush a azul
observeEvent(input$plot_brush, {
brush_index <- brushedPoints(vals$df, input$plot_brush, allRows = TRUE)$selected_
vals$color[brush_index] <- "blue"
isolate(vals$color[!brush_index] <- "black")  # Restablece los puntos no seleccionados
})
# Renderizamos la tabla interactiva con DT
output$mtcars_table <- renderDT({
datatable(mtcars, options = list(pageLength = 10, autoWidth = TRUE),
rownames = TRUE)
})
}
# Ejecutamos la aplicación Shiny
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(DT)
# Definimos la interfaz de usuario (UI)
ui <- fluidPage(
titlePanel("Interacciones avanzadas con ggplot y mtcars"),
# Dividimos la página en dos columnas: Gráfico y tabla
fluidRow(
column(8,
plotOutput("plot",
hover = hoverOpts("plot_hover", delay = 100, delayType = "debounce"),
click = clickOpts("plot_click"),
dblclick = dblclickOpts("plot_dblclick"),
brush = brushOpts("plot_brush", resetOnNew = TRUE)
)
),
column(4,
DTOutput("mtcars_table")
)
)
)
# Definimos el servidor
server <- function(input, output, session) {
# Almacenamos los colores iniciales (negro) en un reactiveValues
vals <- reactiveValues(df = mtcars, color = rep("black", nrow(mtcars)))
# Renderizamos el gráfico con ggplot
output$plot <- renderPlot({
ggplot(vals$df, aes(x = wt, y = mpg)) +
geom_point(aes(color = vals$color), size = 5, alpha = 0.8) +
theme_minimal() +
labs(x = "Peso (1000 lbs)", y = "Millas por galón (mpg)",
title = "Interacción con los puntos de mtcars") +
scale_color_identity()
})
# Hover: Cambia temporalmente el color a gris
observeEvent(input$plot_hover, {
hover_index <- nearPoints(vals$df, input$plot_hover, allRows = TRUE)$selected_
vals$color[hover_index] <- "grey"
isolate(vals$color[!hover_index] <- "black")  # Restaura los colores no seleccionados
})
# Click: Cambia el color a verde
observeEvent(input$plot_click, {
click_index <- nearPoints(vals$df, input$plot_click, allRows = TRUE)$selected_
vals$color[click_index] <- "green"
})
# Doble click: Restablece todos los colores a negro
observeEvent(input$plot_dblclick, {
vals$color <- rep("black", nrow(vals$df))
})
# Brush: Cambia el color de los puntos seleccionados por el brush a azul
observeEvent(input$plot_brush, {
brush_index <- brushedPoints(vals$df, input$plot_brush, allRows = TRUE)$selected_
vals$color[brush_index] <- "blue"
isolate(vals$color[!brush_index] <- "black")  # Restablece los puntos no seleccionados
})
# Renderizamos la tabla interactiva con DT
output$mtcars_table <- renderDT({
datatable(mtcars, options = list(pageLength = 10, autoWidth = TRUE),
rownames = TRUE)
})
}
# Ejecutamos la aplicación Shiny
shinyApp(ui = ui, server = server)
# Cargar las librerías necesarias
library(shiny)
library(ggplot2)
library(DT)
# Interfaz de usuario
ui <- fluidPage(
titlePanel("Shiny App con Interacciones en Gráfico y Tabla"),
sidebarLayout(
sidebarPanel(
h4("Interacciones con el gráfico mtcars")
),
mainPanel(
plotOutput("scatterPlot",
hover = hoverOpts(id = "plot_hover", delay = 100, delayType = "throttle"),
click = "plot_click",
dblclick = "plot_dblclick",
brush = brushOpts(id = "plot_brush")),
DTOutput("table")
)
)
)
# Servidor
server <- function(input, output, session) {
# Crear una copia del dataset con una columna de color
mtcars_data <- reactiveVal(data.frame(mtcars, color = "blue", row.names = NULL))
# Renderizar el gráfico de dispersión
output$scatterPlot <- renderPlot({
data <- mtcars_data()
ggplot(data, aes(x = wt, y = mpg)) +
geom_point(aes(color = color), size = 3) +
scale_color_identity() +
theme_minimal() +
labs(x = "Peso (wt)", y = "Millas por galón (mpg)")
})
# Cambiar el color al hacer hover
observeEvent(input$plot_hover, {
hover <- input$plot_hover
data <- mtcars_data()
if (!is.null(hover)) {
hover_point <- nearPoints(data, hover, threshold = 10, maxpoints = 1)
if (nrow(hover_point) == 1) {
data$color[which(rownames(mtcars) == hover_point$row.names)] <- "gray"
mtcars_data(data)
}
}
}, ignoreInit = TRUE)
# Cambiar el color al hacer click
observeEvent(input$plot_click, {
click <- input$plot_click
data <- mtcars_data()
if (!is.null(click)) {
click_point <- nearPoints(data, click, threshold = 10, maxpoints = 1)
if (nrow(click_point) == 1) {
data$color[which(rownames(mtcars) == click_point$row.names)] <- "green"
mtcars_data(data)
}
}
})
# Restaurar el color al hacer doble click
observeEvent(input$plot_dblclick, {
dblclick <- input$plot_dblclick
data <- mtcars_data()
if (!is.null(dblclick)) {
dblclick_point <- nearPoints(data, dblclick, threshold = 10, maxpoints = 1)
if (nrow(dblclick_point) == 1) {
data$color[which(rownames(mtcars) == dblclick_point$row.names)] <- "blue"
mtcars_data(data)
}
}
})
# Cambiar el color de los puntos dentro del área de brush
observeEvent(input$plot_brush, {
brush <- input$plot_brush
data <- mtcars_data()
if (!is.null(brush)) {
brushed_points <- brushedPoints(data, brush)
if (nrow(brushed_points) > 0) {
data$color[which(rownames(mtcars) %in% brushed_points$row.names)] <- "orange"
mtcars_data(data)
}
}
})
# Renderizar la tabla interactiva
output$table <- renderDT({
datatable(mtcars_data(), options = list(pageLength = 10))
})
}
# Ejecutar la aplicación
shinyApp(ui = ui, server = server)
# Cargar las librerías necesarias
library(shiny)
library(ggplot2)
library(DT)
# Interfaz de usuario
ui <- fluidPage(
titlePanel("Shiny App con Interacciones en Gráfico y Tabla"),
sidebarLayout(
sidebarPanel(
h4("Interacciones con el gráfico mtcars")
),
mainPanel(
plotOutput("scatterPlot",
hover = hoverOpts(id = "plot_hover", delay = 100, delayType = "throttle"),
click = "plot_click",
dblclick = "plot_dblclick",
brush = brushOpts(id = "plot_brush")),
DTOutput("table")
)
)
)
# Servidor
server <- function(input, output, session) {
# Crear una copia del dataset con una columna de color
mtcars_data <- reactiveVal(data.frame(mtcars, color = 'black', row.names = NULL))
# Renderizar el gráfico de dispersión
output$scatterPlot <- renderPlot({
data <- mtcars_data()
ggplot(data, aes(x = wt, y = mpg)) +
geom_point(aes(color = color), size = 3) +
scale_color_identity() +
theme_minimal() +
labs(x = "Peso (wt)", y = "Millas por galón (mpg)")
})
# Cambiar el color al hacer hover
observeEvent(input$plot_hover, {
hover <- input$plot_hover
data <- mtcars_data()
if (!is.null(hover)) {
hover_point <- nearPoints(data, hover, threshold = 10, maxpoints = 1)
if (nrow(hover_point) == 1) {
data$color[which(rownames(mtcars) == hover_point$row.names)] <- "gray"
mtcars_data(data)
}
}
}, ignoreInit = TRUE)
# Cambiar el color al hacer click
observeEvent(input$plot_click, {
click <- input$plot_click
data <- mtcars_data()
if (!is.null(click)) {
click_point <- nearPoints(data, click, threshold = 10, maxpoints = 1)
if (nrow(click_point) == 1) {
data$color[which(rownames(mtcars) == click_point$row.names)] <- "green"
mtcars_data(data)
}
}
})
# Restaurar el color al hacer doble click
observeEvent(input$plot_dblclick, {
dblclick <- input$plot_dblclick
data <- mtcars_data()
if (!is.null(dblclick)) {
dblclick_point <- nearPoints(data, dblclick, threshold = 10, maxpoints = 1)
if (nrow(dblclick_point) == 1) {
data$color[which(rownames(mtcars) == dblclick_point$row.names)] <- "blue"
mtcars_data(data)
}
}
})
# Cambiar el color de los puntos dentro del área de brush
observeEvent(input$plot_brush, {
brush <- input$plot_brush
data <- mtcars_data()
if (!is.null(brush)) {
brushed_points <- brushedPoints(data, brush)
if (nrow(brushed_points) > 0) {
data$color[which(rownames(mtcars) %in% brushed_points$row.names)] <- "orange"
mtcars_data(data)
}
}
})
# Renderizar la tabla interactiva
output$table <- renderDT({
datatable(mtcars_data(), options = list(pageLength = 10))
})
}
# Ejecutar la aplicación
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(DT)
ui <- fluidPage(
titlePanel("Interacción con ggplot y mtcars"),
# Gráfico interactivo
plotOutput("plot",
hover = hoverOpts("plot_hover"),
click = clickOpts("plot_click"),
dblclick = dblclickOpts("plot_dblclick"),
brush = brushOpts("plot_brush", resetOnNew = TRUE)),
# Tabla interactiva
DTOutput("mtcars_table")
)
server <- function(input, output, session) {
# Estado inicial: todos los puntos sin color
vals <- reactiveValues(df = mtcars, color = rep("black", nrow(mtcars)))
# Gráfico ggplot
output$plot <- renderPlot({
ggplot(vals$df, aes(x = wt, y = mpg)) +
geom_point(aes(color = vals$color), size = 4) +
theme_minimal() +
scale_color_identity()
})
# Hover: Cambiar color a gris temporalmente
observeEvent(input$plot_hover, {
hover_index <- nearPoints(vals$df, input$plot_hover, allRows = TRUE)$selected_
vals$color[hover_index] <- "grey"
isolate(vals$color[!hover_index] <- "black")
})
# Click: Cambiar color a verde
observeEvent(input$plot_click, {
click_index <- nearPoints(vals$df, input$plot_click, allRows = TRUE)$selected_
vals$color[click_index] <- "green"
})
# Doble click: Quitar color (volver al estado inicial)
observeEvent(input$plot_dblclick, {
vals$color <- rep("black", nrow(vals$df))
})
# Brush: Cambiar color de los puntos seleccionados en el área de selección
observeEvent(input$plot_brush, {
brush_index <- brushedPoints(vals$df, input$plot_brush, allRows = TRUE)$selected_
vals$color[brush_index] <- "blue"
isolate(vals$color[!brush_index] <- "black")
})
# Mostrar tabla con librería DT
output$mtcars_table <- renderDT({
datatable(mtcars)
})
}
# Ejecutar la app Shiny
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(DT)
ui <- fluidPage(
titlePanel("Interacción con ggplot y mtcars"),
# Gráfico interactivo
plotOutput("plot",
hover = hoverOpts("plot_hover"),
click = clickOpts("plot_click"),
dblclick = dblclickOpts("plot_dblclick"),
brush = brushOpts("plot_brush", resetOnNew = TRUE)),
# Tabla interactiva
DTOutput("mtcars_table")
)
server <- function(input, output, session) {
# Estado inicial: todos los puntos sin color
vals <- reactiveValues(df = mtcars, color = rep("black", nrow(mtcars)))
# Grafico ggplot
output$plot <- renderPlot({
ggplot(vals$df, aes(x = wt, y = mpg)) +
geom_point(aes(color = vals$color), size = 4) +
theme_minimal() +
scale_color_identity()
})
# On hover cambie el color a gris
observeEvent(input$plot_hover, {
hover_index <- nearPoints(vals$df, input$plot_hover, allRows = TRUE)$selected_
vals$color[hover_index] <- "grey"
isolate(vals$color[!hover_index] <- "black")
})
# On click cambie el color a verde
observeEvent(input$plot_click, {
click_index <- nearPoints(vals$df, input$plot_click, allRows = TRUE)$selected_
vals$color[click_index] <- "green"
})
# On doble click quite el color
observeEvent(input$plot_dblclick, {
vals$color <- rep("white", nrow(vals$df))
})
# On brush cambie el color a los puntos que están dentro del rectángulo.
observeEvent(input$plot_brush, {
brush_index <- brushedPoints(vals$df, input$plot_brush, allRows = TRUE)$selected_
vals$color[brush_index] <- "blue"
isolate(vals$color[!brush_index] <- "black")
})
output$mtcars_table <- renderDT({
datatable(mtcars)
})
}
# Ejecutar la app Shiny
shinyApp(ui = ui, server = server)
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Tarea Shiny Plot/Tarea Shiny.R')
install.packages("markdown")
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Tarea Shiny Plot/Tarea Shiny.R')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Tarea Shiny Plot/Tarea Shiny.R')
runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Tarea Shiny Plot/Tarea Shiny.R')
shiny::runApp('C:/Users/barri/Documents/UFM/2024/Segundo Semestre/Data Product/Tarea Shiny Plot/Shiny')
